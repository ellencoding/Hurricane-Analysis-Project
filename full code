# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
def convert_damages(damages):
  updated_damages = []
  for damage in damages:
    if damage[-1] == 'M':
      damage = float(damage[:-1]) * conversion['M']
    elif damage[-1] == 'B':
      damage = float(damage[:-1]) * conversion['B']
    updated_damages.append(damage)
  return updated_damages
# test function by updating damages
updated_damages = convert_damages(damages)
#print(convert_damages(damages))

# 2 
# Create a Table
# Create and view the hurricanes dictionary
def make_dictionary(name, months, years, max_wind, areas, damages, deaths):
  dict = {}
  i = 0
  for i in range(len(names)):
    dict[names[i]] = {'Name': names[i], 'Month': months[i], 'Year': years[i], 'Max Sustained Wind': max_wind[i], 'Areas Affected': areas[i], 'Damage': damages[i], 'Deaths': deaths[i]}
  return dict
dictionary_1 = make_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)
#print(dictionary_1)

# 3
# Organizing by Year
def dict_by_year(name, months, years, max_wind, areas, damages, deaths):
  dict = {}
  i = 0
  for i in range(len(years)):
    if (years[i] in dict) == False:
      dict[years[i]] = [{'Name': names[i], 'Month': months[i], 'Year': years[i], 'Max Sustained Wind': max_wind[i], 'Areas Affected': areas[i], 'Damage': damages[i], 'Deaths': deaths[i]}]
    else:
      dict[years[i]].append({'Name': names[i], 'Month': months[i], 'Year': years[i], 'Max Sustained Wind': max_wind[i], 'Areas Affected': areas[i], 'Damage': damages[i], 'Deaths': deaths[i]})
  return dict

# create a new dictionary of hurricanes with year and key
dictionary_2 = dict_by_year(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)
#print(dictionary_2)

# 4
# Counting Damaged Areas
def areas_count_1(areas):
  new_list = []
  dict = {}
  for area in areas:
    for item in area:
      new_list.append(item)
  new_list_distinct = list(dict.fromkeys(new_list))
  for item in new_list_distinct:
    counter = new_list.count(item)
    dict[item] = counter
  return dict

def areas_count_2(areas):
  dict = {}
  for area in areas:
    for item in area:
      if (item in dict) == False:
        dict[item] = 1
      else:
        dict[item] += 1
  return dict
# create dictionary of areas to store the number of hurricanes involved in
#print(areas_count_2(areas_affected))

# 5 
# Calculating Maximum Hurricane Count
def max_count(areas):
  areas_count = areas_count_2(areas)
  value_list = list(areas_count.values())
  value_list.sort()
  max_v = value_list[-1]
  max_area = {}
  for item in areas_count:
    if areas_count[item] == max_v:
      max_area[item] = max_v
  return max_area
# find most frequently affected area and the number of hurricanes involved in
#print(max_count(areas_affected))

# 6
# Calculating the Deadliest Hurricane
def max_deaths(deaths):
  deadliest_hc = names[0]
  max_deaths = 0
  for i in range(len(deaths)):
    if deaths[i] > max_deaths:
      max_deaths = deaths[i]
      deadliest_hc = names[i]
  return {deadliest_hc: max_deaths}
# find highest mortality hurricane and the number of deaths
#print(max_deaths(deaths))
# 7
# Rating Hurricanes by Mortality
def hc_by_rating(dictionary):
  new_dict = {}
  for hc in dictionary:
    num_deaths = dictionary[hc]['Deaths']
    if num_deaths == 0:
      rating = 0
    elif num_deaths > 0 and num_deaths <= 100:
      rating = 1
    elif num_deaths > 100 and num_deaths <= 500:
      rating = 2
    elif num_deaths > 500 and num_deaths <= 1000:
      rating = 3
    else:
      rating = 4
    if (rating in new_dict) == False:
      new_dict[rating] = [dictionary[hc]]
    else:
      new_dict[rating].append(dictionary[hc])
  return new_dict
# categorize hurricanes in new dictionary with mortality severity as key
sorted_ratings = dict(sorted(hc_by_rating(dictionary_1).items()))
#print(sorted_ratings)

# 8 Calculating Hurricane Maximum Damage
def costliest_hc(dictionary):
  max_damage = 0
  for hc in dictionary:
    if type(dictionary[hc]['Damage']) != str:
      if dictionary[hc]['Damage'] > max_damage:
        max_damage = dictionary[hc]['Damage']
        name = hc
  return {hc: max_damage}
# find highest damage inducing hurricane and its total cost
print(costliest_hc(dictionary_1))
# for i in range(4):
#   updated_damages.remove('Damages not recorded')
# updated_damages.sort()
# print(updated_damages)
# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
def hc_by_damage(dictionary):
  new_dict = {0:[],1:[],2:[],3:[],4:[]}
  for hc in dictionary:
    damage = dictionary[hc]['Damage']
    if damage == 'Damages not recorded':
      rating = 0
    elif damage > 0 and damage <= 100000000:
      rating = 1
    elif damage > 100000000 and damage <= 1000000000:
      rating = 2
    elif damage > 1000000000 and damage <= 10000000000:
      rating = 3
    else:
      rating = 4
    new_dict[rating].append(dictionary[hc])
  return new_dict
# categorize hurricanes in new dictionary with damage severity as key
print(hc_by_damage(dictionary_1))
